"""update_event_model_fields

Revision ID: 95f2ab15ca3f
Revises: add_events_table
Create Date: 2025-01-25 17:48:48.609231

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '95f2ab15ca3f'
down_revision: Union[str, None] = 'add_events_table'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('events', sa.Column('platform_id', sa.String(), nullable=False))
    op.add_column('events', sa.Column('start_datetime', sa.DateTime(timezone=True), nullable=False))
    op.add_column('events', sa.Column('end_datetime', sa.DateTime(timezone=True), nullable=False))
    op.add_column('events', sa.Column('venue_name', sa.String(), nullable=False))
    op.add_column('events', sa.Column('venue_lat', sa.Float(), nullable=False))
    op.add_column('events', sa.Column('venue_lon', sa.Float(), nullable=False))
    op.add_column('events', sa.Column('venue_city', sa.String(), nullable=False))
    op.add_column('events', sa.Column('venue_state', sa.String(), nullable=False))
    op.add_column('events', sa.Column('venue_country', sa.String(), nullable=False))
    op.add_column('events', sa.Column('organizer_id', sa.String(), nullable=False))
    op.add_column('events', sa.Column('organizer_name', sa.String(), nullable=False))
    op.add_column('events', sa.Column('platform', sa.String(), nullable=False))
    op.add_column('events', sa.Column('is_online', sa.Boolean(), nullable=False))
    op.add_column('events', sa.Column('rsvp_count', sa.Integer(), nullable=False))
    op.add_column('events', sa.Column('last_scraped_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('events', 'url',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('events', 'categories',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('events', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.drop_constraint('events_source_id_key', 'events', type_='unique')
    op.drop_index('ix_events_categories', table_name='events', postgresql_using='gin')
    op.drop_index('ix_events_location', table_name='events', postgresql_using='gin')
    op.drop_index('ix_events_price_info', table_name='events', postgresql_using='gin')
    op.drop_index('ix_events_source_source_id', table_name='events')
    op.drop_index('ix_events_start_time', table_name='events')
    op.create_index(op.f('ix_events_id'), 'events', ['id'], unique=False)
    op.create_unique_constraint(None, 'events', ['platform_id'])
    op.drop_column('events', 'location')
    op.drop_column('events', 'like_count')
    op.drop_column('events', 'end_time')
    op.drop_column('events', 'view_count')
    op.drop_column('events', 'venue')
    op.drop_column('events', 'source')
    op.drop_column('events', 'start_time')
    op.drop_column('events', 'source_id')
    op.drop_column('events', 'tags')
    op.drop_column('events', 'organizer')
    op.alter_column('oauth_tokens', 'provider_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('ix_traits_behavior_traits', table_name='traits', postgresql_using='gin')
    op.drop_index('ix_traits_last_updated_at', table_name='traits')
    op.drop_index('ix_traits_music_traits', table_name='traits', postgresql_using='gin')
    op.drop_index('ix_traits_next_update_at', table_name='traits')
    op.drop_index('ix_traits_social_traits', table_name='traits', postgresql_using='gin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_traits_social_traits', 'traits', ['social_traits'], unique=False, postgresql_using='gin')
    op.create_index('ix_traits_next_update_at', 'traits', ['next_update_at'], unique=False)
    op.create_index('ix_traits_music_traits', 'traits', ['music_traits'], unique=False, postgresql_using='gin')
    op.create_index('ix_traits_last_updated_at', 'traits', ['last_updated_at'], unique=False)
    op.create_index('ix_traits_behavior_traits', 'traits', ['behavior_traits'], unique=False, postgresql_using='gin')
    op.alter_column('oauth_tokens', 'provider_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('events', sa.Column('organizer', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('tags', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('source_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('venue', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('like_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'events', type_='unique')
    op.drop_index(op.f('ix_events_id'), table_name='events')
    op.create_index('ix_events_start_time', 'events', ['start_time'], unique=False)
    op.create_index('ix_events_source_source_id', 'events', ['source', 'source_id'], unique=True)
    op.create_index('ix_events_price_info', 'events', ['price_info'], unique=False, postgresql_using='gin')
    op.create_index('ix_events_location', 'events', ['location'], unique=False, postgresql_using='gin')
    op.create_index('ix_events_categories', 'events', ['categories'], unique=False, postgresql_using='gin')
    op.create_unique_constraint('events_source_id_key', 'events', ['source_id'])
    op.alter_column('events', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('events', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('events', 'categories',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('events', 'url',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('events', 'last_scraped_at')
    op.drop_column('events', 'rsvp_count')
    op.drop_column('events', 'is_online')
    op.drop_column('events', 'platform')
    op.drop_column('events', 'organizer_name')
    op.drop_column('events', 'organizer_id')
    op.drop_column('events', 'venue_country')
    op.drop_column('events', 'venue_state')
    op.drop_column('events', 'venue_city')
    op.drop_column('events', 'venue_lon')
    op.drop_column('events', 'venue_lat')
    op.drop_column('events', 'venue_name')
    op.drop_column('events', 'end_datetime')
    op.drop_column('events', 'start_datetime')
    op.drop_column('events', 'platform_id')
    # ### end Alembic commands ###
